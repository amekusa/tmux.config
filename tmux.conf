# === TMUX CONFIGURATION ===

# NOTE:
#   -s = Server options
#   -g = Global options
#   -w = Window options
#   -a = Append
#   -u = Unset

# NOTE:
#   Format Syntax:
#   - #{<var>}       = Interpolates the value of <var>
#   - #{?<flag>,A,B} = If <flag> is 1, outputs A, otherwise B
#   - #[<styles>]    = bg=<color>, fg=<color>, bold, italics, etc.
#                      Multiple styles must be separated with '#,'
#   - #{<fn>:string} = Processes a string with <fn>
#   - #{l:string}    = Outputs a string literally

# set proper $TERM variable
# set -s default-terminal 'tmux-256color'  # NOTE: 'tmux-256color' terminfo needs to be installed
set -s default-terminal "$TERM"  # inherit the $TERM as it is
#   NOTE:
#   - Not recommended
#   - The terminfo specific to your terminal emulator needs to be installed
#   - Neovim raises a warning to this setting
#   - Home/End keys may not work

# enable true-color
set -sa terminal-overrides ',*:Tc'

# kill empty server?
set -s exit-empty off

# wait-time for escape key to register (ms)
set -s escape-time 0

# receive focus events from terminal?
set -s focus-events on

# run the default shell without loading .profile or .zprofile
set -g default-command "exec "$SHELL""

# kill empty session?
set -g destroy-unattached on

# enable mouse integration?
set -g mouse on

# remove status bar
set -g status off
set -g status-interval 0  # no update
#   NOTE: To check all the current status options:
#         $ tmux show-options -g | grep status

# rename windows automatically
set -g automatic-rename on
set -g automatic-rename-format '#{b:pane_current_path}'  # 'b:' = basename

# size of the top-left pane
set -g main-pane-width  62%
set -g main-pane-height 62%

# border colors
set -g pane-border-style fg=colour240

# duration of 'display' command
set -g display-time 5000  # ms


# ---- KEY BINDINGS ----

# unbind default bindings
unbind -a

# ctrl + a = prefix
set -g prefix C-a
bind C-a send-prefix  # press prefix twice to send actual ctrl+a

# repeat timeout
set -g repeat-time 2000  # ms
#   NOTE: Bindings with '-r' can be repeatable without pressing the prefix again in this time.


# -- PANES --

# x = kill pane
bind -N ': Kill pane' x confirm-before -p 'Kill pane #{pane_index} (running: #[bold]#{pane_current_command}#[none]) ? - [y/n]' kill-pane

# slash = new pane to right
bind -N ': New pane to Right' / split-window -h -c '#{pane_current_path}'

# hyphen = new pane to down
bind -N ': New pane to Down' - split-window -v -c '#{pane_current_path}'

# O/o = prev/next layout
bind -N ': Cycle layout (Backward)' -r O select-layout -p
bind -N ': Cycle layout'            -r o select-layout -n

# h/j/k/l = switch pane
bind -N ': Switch to the Left pane'  h select-pane -L
bind -N ': Switch to the Down pane'  j select-pane -D
bind -N ': Switch to the Up pane'    k select-pane -U
bind -N ': Switch to the Right pane' l select-pane -R

# p = switch to the previous pane
bind -N ': Switch to the previous pane' p last-pane

# switch pane by index
bind -N ': Switch to pane 0' 0 select-pane -t 0
bind -N ': Switch to pane 1' 1 select-pane -t 1
bind -N ': Switch to pane 2' 2 select-pane -t 2
bind -N ': Switch to pane 3' 3 select-pane -t 3
bind -N ': Switch to pane 1' 9 select-pane -t 1
bind -N ': Switch to pane 2' 8 select-pane -t 2
bind -N ': Switch to pane 3' 7 select-pane -t 3

# H/J/K/L = swap panes
bind -N ': Swap with the Left pane'  H swap-pane -d -t '{left-of}'
bind -N ': Swap with the Down pane'  J swap-pane -d -t '{down-of}'
bind -N ': Swap with the Up pane'    K swap-pane -d -t '{up-of}'
bind -N ': Swap with the Right pane' L swap-pane -d -t '{right-of}'

# P = swap with the previous pane
bind -N ': Swap with the previous pane' P swap-pane -d -t '{last}'

# s/d/e/f = resize pane
bind -N ': Resize pane to Left'  -r s resize-pane -L 8
bind -N ': Resize pane to Down'  -r d resize-pane -D 4
bind -N ': Resize pane to Up'    -r e resize-pane -U 4
bind -N ': Resize pane to Right' -r f resize-pane -R 8

# z or m = toggle zoom
bind -N ': ◱ Toggle zoom' z resize-pane -Z
bind -N ': ◱ Toggle zoom' m resize-pane -Z

# semicolon = toggle zoom + switch pane
bind -N ': ◱ Toggle zoom & switch pane' \; if -F '#{==:#{window_panes},1}' { # single pane
	split-window -v -c '#{pane_current_path}'
} { # multiple panes
	if -F '#{window_zoomed_flag}' {
		resize-pane -Z
		last-pane
	} {
		last-pane
		resize-pane -Z
	}
}

# ctrl + p = popup window
bind -N ': Show popup window' C-p display-popup -E -w 75% -h 75% -b heavy -d '#{pane_current_path}'

# ? = show keymaps
bind -N ': Show keymaps' ? display-popup -E -w 56 -h 62% -b heavy -T '#[reverse] q : quit #[none]' 'tmux list-keys -N | sort -t: -k2 | less'

# ctrl + t = show tenki clock
if 'command -v tenki' {
	bind -N ': ◷ Show clock' t display-popup -E -w 43 -h 21 -b double -T ' q to quit ' "tenki --fps 30 --wind disable --level 100"
}


# -- WINDOWS --

# q = kill window
bind -N ': Kill window' q confirm-before -p 'Kill window #{window_index} "#{window_name}" ? - [y/n]' kill-window

# n = new window
bind -N ': New window' n new-window

# w = previous window
bind -N ': Switch to the previous window' w last-window

# comma/period = prev/next window
bind -N ': Cycle window (Backward)' -r , previous-window
bind -N ': Cycle window'            -r . next-window

# a = show window list
bind -N ': Choose window' a choose-tree -Zw -F '\
#{?session_format, Session: #{t/f/#{l:%m/%d ◷ %H:%M}:session_created} - #{t/f/#{l:%m/%d ◷ %H:%M}:session_activity},\
#{?window_format, ◷ #{t/f/#{l:%H:%M}:window_activity} \
#{?window_active,#[bg=brightwhite#,fg=black#,bold] #{p16:#{=/15/…:#{?window_zoomed_flag,◱ ,}#{window_name}}} ,\
#{?window_last_flag,#[bg=cyan#,fg=black#,bold] #{p16:#{=/15/…:#{?window_zoomed_flag,◱ ,}#{window_name}}} ,\
▏#{p16:#{=/15/…:#{?window_zoomed_flag,◱ ,}#{window_name}}}▕}}#[bg=default#,fg=default#,none]\
#{P: #{?pane_active,,#[dim]}#{pane_current_command}#[none]},\
#{?pane_format, #{?pane_active,#[bold],}#{pane_current_command}#[none],}}}'

# A = swap windows
bind -N ': Swap windows' A choose-tree -Zw -F '\
#{?session_format, Session: #{t/f/#{l:%m/%d ◷ %H:%M}:session_created} - #{t/f/#{l:%m/%d ◷ %H:%M}:session_activity},\
#{?window_format, ◷ #{t/f/#{l:%H:%M}:window_activity} \
#{?window_active,#[bg=magenta#,fg=black] ⇆  #[bg=brightwhite#,fg=black#,bold] #{p16:#{=/15/…:#{?window_zoomed_flag,◱ ,}#{window_name}}} ,\
#{?window_last_flag,#[bg=cyan#,fg=black#,bold] #{p16:#{=/15/…:#{?window_zoomed_flag,◱ ,}#{window_name}}} ,\
▏#{p16:#{=/15/…:#{?window_zoomed_flag,◱ ,}#{window_name}}}▕}}#[bg=default#,fg=default#,none]\
#{P: #{?pane_active,,#[dim]}#{pane_current_command}#[none]},\
#{?pane_format, #{?pane_active,#[bold],}#{pane_current_command}#[none],}}}' 'swap-window -d -t %%'


# -- MISC --

# u = scroll mode
bind -N ': Scroll mode' u copy-mode

# ctrl+h = set current session's dir to the current pane's dir
bind -N ': Set session home to the current directory' C-h {
	attach-session -c '#{pane_current_path}'
	display 'Session home: #{pane_current_path}'
}

# r = reload config
bind -N ': Reload config' r {
	display 'Reloading config...'
	source-file "$HOME/.config/tmux/tmux.conf"
	display 'Config has been reloaded.'
}

# fix home/end keys
bind -n Home send Escape 'OH'
bind -n End  send Escape 'OF'
#   NOTE: This is a dirty hack. There should be the other way around.
#         https://stackoverflow.com/questions/18600188/home-end-keys-do-not-work-in-tmux

# enable shift+enter & ctrl+enter key combinations
# bind -n S-Enter send "\u001B[13;2u"
# bind -n C-Enter send "\u001B[13;5u"
#   NOTE: This also requires to enable the keybindings in your terminal settings.


# ---- PLUGINS ----

# tmux-yank (enables copy)
set -g @plugin 'tmux-plugins/tmux-yank'

# tmux-resurrect
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-save    'C-s'  # ctrl + s = save session
set -g @resurrect-restore 'C-r'  # ctrl + r = restore session

# tmux-better-mouse-mode
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @scroll-down-exit-copy-mode 'on'
set -g @scroll-speed-num-lines-per-scroll '1'
set -g @emulate-scroll-for-no-mouse-alternate-buffer 'on'

# initialize TPM (TMUX Plugin Manager)
setenv -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.config/tmux/plugins/"
set -g @plugin 'tmux-plugins/tpm'
if "[ -f "$HOME/.config/tmux/plugins/tpm/tpm" ]" {
	run "$HOME/.config/tmux/plugins/tpm/tpm"
}

# NOTE: To install TPM:
#       $ git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# NOTE: To install TPM plugins:
#       Press `Prefix + Shift + i` in TMUX

# NOTE: To Update TPM plugins:
#       Press `Prefix + Shift + u` in TMUX

